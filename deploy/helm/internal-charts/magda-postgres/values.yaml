global:
  postgresql:
    # -- see `magda-core` chart document
    existingSecret: "db-main-account-secret"
    # -- PostgreSQL username
    # The created user will have superuser privileges if username is postgres
    # For in k8s PostgreSQL, we should use `postgres` so it has privileges for DB schema migrators to run
    postgresqlUsername: "postgres"
    # -- Default database name to be created. At the moment, its value must be `postgres`.
    postgresqlDatabase: "postgres"
    # -- Whether auto create password secret. More see `magda-core` chart document
    autoCreateSecret: true

postgresql:
  # -- Set `fullnameOverride` & `nameOverride` to fixed value so it's easier to manage the naming pattern.
  # And point k8s service to DB instance.
  fullnameOverride: "default-db-postgresql"
  # -- Set `fullnameOverride` & `nameOverride` to fixed value so it's easier to manage the naming pattern.
  # And point k8s service to DB instance.
  nameOverride: "default-db-postgresql"
  image:
    # -- the default docker image tag/version used by the postgresql chart. 
    # When dump the magda version using `yarn set-version` (at magda repo root), this default version will be auto-replaced with the new chart version number.
    tag: "2.0.1"
    repository: "data61/magda-postgres"

  # -- the name of config map contains entended postgresql config options.
  # You should not change this value as this configMap is auto-generated.
  # If you want to override the postgresql conf option, you should add options to `.Values.config` field of `magda-postgres` chart.
  # Please note: For this field, you can use template string e.g. "{{ .Values.fullnameOverride }}" to reference any values passed to subchat `postgresql`.
  # See more: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  extendedConfConfigMap: "{{ .Values.fullnameOverride }}-extended-config"

  # -- the name of config map contains extra env vars for postgresql pod.
  # You should not change this value as this configMap is auto-generated.
  # If you want to add extra env vars, you should add vars to `.Values.envVars` field of `magda-postgres` chart.
  # Please note: For this field, you can use template string e.g. "{{ .Values.fullnameOverride }}" to reference any values passed to subchat `postgresql`.
  # See more: https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  extraEnvVarsCM: "{{ .Values.fullnameOverride }}-extra-env-vars"

  primary:
    # -- extra volumes can be set here. 
    # e.g. map backup storage config secret as files in /etc/wal-g.d/env
    extraVolumes: []
    # -- extra volume mount can be set here. 
    # e.g. mount backup storage config secret and map as files in /etc/wal-g.d/env
    extraVolumeMounts: []
    # --- Set priority class of the primary database instance.
    # When `global.enablePriorityClass` is `true`. We should set this config to "magda-9" to make sure db instance get appropriate schedule priority.
    # By default, Magda will create priorityClassName from "magda-10" to "magda-0"
    # where "magda-10" indicates the highest priority. 
    priorityClassName: ""

  persistence:
    # -- set the persistence volume size of the postgresql statefulset
    size: "50Gi"
  # -- Set the resource config for the postgresql container
  resources:
    requests:
      cpu: 200m
      memory: 500Mi

  livenessProbe:
    # -- `customLivenessProbe` will only be used when `enabled`=`false`
    # Otherwise, default livenessProbe will be used.
    enabled: false
  # -- Custom Liveness Probe for postgresql.
  # when in recovery mode, only check whether `$PGDATA/recovery.signal` exists.
  customLivenessProbe: |
    exec:
      command:
        - /bin/sh
        - -c
        - |
          if [ -f /wal-g/base-backup.fetching ]
          then 
          exit 0
          fi
        {{- if (include "postgresql.database" .) }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} -d "dbname={{ include "postgresql.database" . }} {{- if and .Values.tls.enabled .Values.tls.certCAFilename }} sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}{{- end }}" -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- else }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} {{- if and .Values.tls.enabled .Values.tls.certCAFilename }} -d "sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}"{{- end }} -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- end }}
    initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
    successThreshold: {{ .Values.livenessProbe.successThreshold }}
    failureThreshold: {{ .Values.livenessProbe.failureThreshold }}

  readinessProbe:
    # -- `customReadinessProbe` will only be used when `enabled`=`false`
    # Otherwise, default livenessProbe will be used.
    enabled: false
  # -- Custom Readiness Probe for postgresql.
  # when in recovery mode, only check whether `$PGDATA/recovery.signal` exists.
  customReadinessProbe: |
    exec:
      command:
        - /bin/sh
        - -c
        - -e
        - |
          if [ -f /wal-g/base-backup.fetching ]
          then 
          exit 0
          fi
        {{- if (include "postgresql.database" .) }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} -d "dbname={{ include "postgresql.database" . }} {{- if .Values.tls.enabled }} sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}{{- end }}" -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- else }}
          exec pg_isready -U {{ include "postgresql.username" . | quote }} {{- if .Values.tls.enabled }} -d "sslcert={{ include "postgresql.tlsCert" . }} sslkey={{ include "postgresql.tlsCertKey" . }}"{{- end }} -h 127.0.0.1 -p {{ template "postgresql.port" . }}
        {{- end }}
        {{- if contains "bitnami/" .Values.image.repository }}
          [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
        {{- end }}
    initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
    successThreshold: {{ .Values.readinessProbe.successThreshold }}
    failureThreshold: {{ .Values.readinessProbe.failureThreshold }}

# -- any postgreSQL config options here have highest priority and will override any existing config option values.
# Be sure you understand the impact of any values set as they might override the values required for other helm chart options.
# More details please see here: extended-config-configmap.yaml template
config: {}

# -- any extra env vars that will be avialable in DB pod.
envVars:
  # -- we move wal-g prefetch location outside PGDATA to avoid pg_rewind issue in postgresql 13.
  # See: https://github.com/wal-g/wal-g/blob/master/docs/PostgreSQL.md
  WALG_PREFETCH_DIR: "/wal-g/prefetch"

backupRestore:
  # -- Storage config for backup & restore.
  # All supported storage and available storage config options can be found from [here](https://github.com/wal-g/wal-g/blob/master/docs/STORAGES.md).
  # e.g. 
  # ``` 
  # storageConfig:
  #   WALG_S3_PREFIX: "s3://bucket/path/to/folder"
  # ```
  # Secrets (e.g. `AWS_SECRET_ACCESS_KEY`) can be either set here or set in a manually created secret.
  # When use secret to storage secret, it's required to:
  # <ul>
  # <li>Set `.Values.backupRestore.storageSecretName` to the name of the secret contains all secret values for your storage option.</li>
  # <li>
  #   Mount the secret in a volume for DB pod (mount to path `/etc/wal-g.d/env`) by add an additional entry to `.Values.postgresql.primary.extraVolumes` & `.Values.postgresql.primary.extraVolumeMounts`. 
  # </li>
  # </ul>
  storageConfig: {}
  # -- For usage of this config option. Please see description of field `storageConfig`.
  storageSecretName: ""
  image:
    # -- wal-g docker image name
    name: "magda-wal-g"
    # -- wal-g docker image tag
    tag: "1.1.0"
    # -- wal-g docker image repo
    repository: "docker.io/data61"
    # -- wal-g docker image pull policy
    pullPolicy: IfNotPresent
  backup:
    # -- whether backup feature should be turn on.
    # The change of this field (and all other fields in backupRestore section) will take effect after restart the database pod.
    enabled: false
    # -- To configure the size of one backup bundle (in bytes). See info of WALG_TAR_SIZE_THRESHOLD config option on [this page](https://github.com/wal-g/wal-g/blob/master/docs/PostgreSQL.md)
    # Due to [this issue](https://github.com/wal-g/wal-g/issues/1106), we set default value to 21474836480 (20G) to avoid oversize issue.
    # Users can set this setting to a bigger value if needs to create backup with bigger tablespace.
    walgTarSizeThreshold: "21474836480"
    # -- archive timeout setting. See: https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-ARCHIVE-TIMEOUT
    # This setting guarantees there would be at least one WAL segment file generated (Thus, avaiable for backup) within the time frame.
    # Lower this value will bloat your archive storage but will reduce the max. time window of data loss when you need to recover from the WAL achieve backup.
    # Default value is 600 seconds (10 mins)
    archiveTimeout: 600
    # -- See: https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-LEVEL
    # You shouldn't change this option unless for special reason.
    walLevel: "replica"
    # -- old backup will be removed every time when a new backup has been created.
    # the backup removal is done via [wal-g delete](https://github.com/wal-g/wal-g/blob/master/docs/README.md#delete)
    # This option specify the number of most recent backups to retain during the backup removal
    numberOfBackupToRetain: 7
    # -- schedule (in Cron Syntax) to perform [base backup](https://www.postgresql.org/docs/current/continuous-archiving.html).
    # default to every Saturday 15:00PM UTC time (Sydney Time 1:00AM Sunday).
    # The base backup is produced using [wal-g](https://github.com/wal-g/wal-g) via [base backup protocol](https://www.postgresql.org/docs/current/app-pgbasebackup.html) remotely.
    schedule: "0 15 * * 6"
    # -- resource config for the pod container that runs backup jobs. e.g.: <br/>
    # jobResourceConfig: <br/>
    # &nbsp;&nbsp;requests: <br/>
    # &nbsp;&nbsp;&nbsp;&nbsp;memory: "64Mi" <br/>
    # &nbsp;&nbsp;&nbsp;&nbsp;cpu: "250m" <br/>
    jobResourceConfig: {}
  recoveryMode:
    # -- Whether run the DB in the receovery mode.
    # When correct config is in place, recovery script will run (using [wal-g](https://github.com/wal-g/wal-g)) to restore DB using previous backup.
    # The change of this field (and all other fields in backupRestore section) will take effect after restart the database pod.
    enabled: false
    # -- the name of the base backup that will be used for restoring database. 
    # By default, the latest base backup will be used. 
    # If the latest base backup doesn't, you might want to list all available base backups in the target storage and pick an alternative base backup.
    # e.g. "base_000000020000000000000052".
    baseBackupName: "LATEST"
