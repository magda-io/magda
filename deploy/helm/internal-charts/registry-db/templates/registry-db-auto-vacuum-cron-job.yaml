{{- if .Values.autoVacuum.enable -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: registry-db-auto-vacuum-job
spec:
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  schedule: {{ .Values.autoVacuum.schedule | quote }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      completions: 1
      parallelism: 1
      template:
        metadata:
          name: registry-db-auto-vacuum-cron-job
        spec:
          {{- $imageEnv := omit . "Values" }}
          {{- $_ := set $imageEnv "Values" (omit .Values "image") }}
          {{- $_ := set $imageEnv.Values "image" .Values.vacuumJobImage }}
          {{- include "magda.imagePullSecrets" $imageEnv | indent 10 }}
          containers:
            - name: registry-db-auto-vacuum-cron-job
              image: {{ include "magda.image" $imageEnv | quote }}
              imagePullPolicy: {{ include "magda.imagePullPolicy" $imageEnv | quote }}
              command:
              - "/bin/bash"
              - "-c"
              - |
                # Add user 1001 to /etc/passwd as postgres lib will check username in it
                # more details see the docker image repo
                /usr/local/bin/adduser.sh
                echo "Running DB maintenance routine:"
                psql -c "VACUUM VERBOSE ANALYZE"
                if [ "$?" == "0" ]; then
                  echo "DB maintenance routine has been run sucessfully."
                else 
                  echo "DB maintenance routine failed."
                fi;
              resources: 
                requests:
                  cpu: 10m
                  memory: 50Mi
                limits:
                  cpu: 50m
              env:
                - name: PGHOST
                  value: registry-db
                - name: PGPORT
                  value: "5432"
                - name: PGDATABASE
                  value: postgres
                - name: PGUSER
                  value: postgres
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.postgresql.existingSecret | quote }}
                      key: "postgresql-password"
          restartPolicy: "OnFailure"
{{- end }}