# we need to have this section in every module
# Plus, logback.xml in resource of every module
# Put into common module since not working properly
# Although logging system does see config files in both paths
akka {
    # set this on to debug logging system itself
    # useful when you not sure which config is loaded
    log-config-on-start = off
    loggers = ["akka.event.Logging$DefaultLogger"]
    # have to set this in order make sure logs are filtered using xml config before enter log bus
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    loglevel = "INFO"

    # By default messages sent to dead letters are logged at info level
    # We turned it off to avoid flooding the the logs when busy
    # Alternatively, we can set log-dead-letters = 10 i.e. only display 10 dead letters
    log-dead-letters = off
    # We don't want to see dead letters during system shutdown
    log-dead-letters-during-shutdown = off

    http {
        server {
            # Defines the default time period within which the application has to
            # produce an HttpResponse for any given HttpRequest it received.
            # The timeout begins to run when the *end* of the request has been
            # received, so even potentially long uploads can have a short timeout.
            # Set to `infinite` to completely disable request timeout checking.
            #
            # Make sure this timeout is smaller than the idle-timeout, otherwise,
            # the idle-timeout will kick in first and reset the TCP connection
            # without a response.
            #
            # If this setting is not `infinite` the HTTP server layer attaches a
            # `Timeout-Access` header to the request, which enables programmatic
            # customization of the timeout period and timeout response for each
            # request individually.
            request-timeout = 30s

            # The time after which an idle connection will be automatically closed.
            # Set to `infinite` to completely disable idle connection timeouts.
            idle-timeout = 60s
        }


    }
}

http {
  interface = "0.0.0.0"
  port = 6101
  externalUrl.v0 = "http://localhost:6101/v0/"
}

db {
  default {
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://localhost/postgres"
    url = ${?POSTGRES_URL}
    poolValidationQuery = "SELECT 1"
    user = "postgres"
    user = ${?POSTGRES_USER}
    password = ${?POSTGRES_PASSWORD}
  }
}

authorization {
  skipOpaQuery = false
}

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

webhooks {
  # Some web hook messages may start tasks that are long blocking calls, those tasks
  # will be executed in this dedicated and fixed size thread pool to avoid depleting
  # the resources. The fixed pool size may need some fine-tuning.
  AllWebHooksActor-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
        fixed-pool-size = 16
    }
    throughput = 1
  }

  # The SingleWebHookActor will buffer some long processing messages
  # in this queue to free up its mailbox so that it can process other
  # short processing messages promptly.
  # The value may need some fine-tuning.
  SingleWebHookActorSourceQueueSize = 1000

  actorTickRate = 2000
  retryInterval = 3600000
  eventPageSize = 10
}

# How long to wait for a DELETE /records/?sourceTagToPreserve=x&sourceId=y call before returning a processing status code in ms
trimBySourceTagTimeoutThreshold = 10000

auth {
    userId = "00000000-0000-4000-8000-000000000000"
}

authApi {
    baseUrl = "http://localhost:6104"
}

# whether validate received aspect data against aspect json schema
validateJsonSchema = true

scalikejdbc{
    global {
        loggingSQLAndTime.enabled = false
        loggingSQLAndTime.singleLineMode = true
        loggingSQLAndTime.logLevel = INFO
        loggingSQLAndTime.warningEnabled = true
        loggingSQLAndTime.warningThresholdMillis = 5000
        loggingSQLAndTime.warningLogLevel = warn
    }
}
