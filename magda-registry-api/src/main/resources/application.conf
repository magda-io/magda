# we need to have this section in every module
# Plus, logback.xml in resource of every module
# Put into common module since not working properly
# Although logging system does see config files in both paths
akka {
    # set this on to debug logging system itself
    # useful when you not sure which config is loaded
    log-config-on-start = off
    loggers = ["akka.event.Logging$DefaultLogger"]
    # have to set this in order make sure logs are filtered using xml config before enter log bus
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    loglevel = "INFO"

    # By default messages sent to dead letters are logged at info level
    # We turned it off to avoid flooding the the logs when busy
    # Alternatively, we can set log-dead-letters = 10 i.e. only display 10 dead letters
    log-dead-letters = off
    # We don't want to see dead letters during system shutdown
    log-dead-letters-during-shutdown = off

    http {
        server {
            # Defines the default time period within which the application has to
            # produce an HttpResponse for any given HttpRequest it received.
            # The timeout begins to run when the *end* of the request has been
            # received, so even potentially long uploads can have a short timeout.
            # Set to `infinite` to completely disable request timeout checking.
            #
            # Make sure this timeout is smaller than the idle-timeout, otherwise,
            # the idle-timeout will kick in first and reset the TCP connection
            # without a response.
            #
            # If this setting is not `infinite` the HTTP server layer attaches a
            # `Timeout-Access` header to the request, which enables programmatic
            # customization of the timeout period and timeout response for each
            # request individually.
            request-timeout = 60s

            # The time after which an idle connection will be automatically closed.
            # Set to `infinite` to completely disable idle connection timeouts.
            idle-timeout = 60s
        }


    }
}

# When role = "readonly", the registry api instance will run in readonly mode without processing webhook.
# The readonly registry api instances are usuful for horizontal scale up for read only workload.
# When role = "full" (default), the registry api instance will run in full function mode.
role = "full"

http {
  interface = "0.0.0.0"
  port = 6101
  externalUrl.v0 = "http://localhost:6101/v0/"
}

db {
  default {
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://localhost/postgres"
    url = ${?POSTGRES_URL}
    poolValidationQuery = "SELECT 1"
    user = "postgres"
    user = ${?POSTGRES_USER}
    password = ${?POSTGRES_PASSWORD}
    poolFactoryName = "magda"
    poolInitialSize = 5
    poolMaxSize = 20
  }
}

db-query {
    # the global timeout setting. i.e. it will impacts all queries
    # The setting will actually impact the postgresql client connection setting:
    # [statement_timeout](https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-STATEMENT-TIMEOUT)
    # The value of setting should be longer than other timeout settings.
    global-timeout = "15m"

    # the default timeout setting used for most common queries that serve rest APIs.
    # we put it in place via DBSession.queryTimeout(seconds: Int)
    default-timeout = "180s"

    # Similar to `default-timeout`. But this setting allow us to use different (often longer) timeout settings for long queries.
    # e.g. Trim operations.
    long-query-timeout = "10m"

    # Full text search configuration. psql's \dF command shows all available configurations
    # Once the configuration changed, the index on recordaspects table should be recreated.
    # You can use the following SQL (with `new-config-name` replaced with the new text search config set here):
    # CREATE INDEX idx_data_full_text ON recordaspects
    # USING GIN (jsonb_to_tsvector('new-config-name'::regconfig, data, '["string"]'));
    text-search-config = "english"
}

authorization {
  # Skip asking authorization decisions from policy engine.
  # `UnconditionalTrueDecision` will be always returned for this case
  # Useful when running locally - DO NOT TURN ON IN PRODUCTION
  skipOpaQuery = false
}

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

# this pool is for long running operation e.g. trim
long-running-db-operation-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 5
  }
  throughput = 1
}

# this pool is for event versioning operation (time machine)
registry-event-versioning-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 5
  }
  throughput = 1
}

webhooks {
  # Some web hook messages may start tasks that are long blocking calls, those tasks
  # will be executed in this dedicated and fixed size thread pool to avoid depleting
  # the resources. The fixed pool size may need some fine-tuning.
  AllWebHooksActor-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
        fixed-pool-size = 16
    }
    throughput = 1
  }

  # The SingleWebHookActor will buffer some long processing messages
  # in this queue to free up its mailbox so that it can process other
  # short processing messages promptly.
  # The value may need some fine-tuning.
  SingleWebHookActorSourceQueueSize = 1000

  actorTickRate = 2000
  retryInterval = 3600000
  eventPageSize = 10
}

akka.actor.deployment {
  /WebHookActor {
    dispatcher = webhooks.AllWebHooksActor-dispatcher
  }
  "/WebHookActor/**" {
    dispatcher = webhooks.AllWebHooksActor-dispatcher
  }
}

# How long to wait for a DELETE /records/?sourceTagToPreserve=x&sourceId=y call before returning a processing status code in ms
trimBySourceTagTimeoutThreshold = 10000

auth {
    userId = "00000000-0000-4000-8000-000000000000"
}

authApi {
    baseUrl = "http://localhost:6104"
}

# whether validate received aspect data against aspect json schema
validateJsonSchema = true

scalikejdbc{
    global {
        loggingSQLErrors = false
        loggingSQLAndTime.enabled = false
        loggingSQLAndTime.singleLineMode = true
        loggingSQLAndTime.logLevel = INFO
        loggingSQLAndTime.warningEnabled = true
        loggingSQLAndTime.warningThresholdMillis = 5000
        loggingSQLAndTime.warningLogLevel = warn
    }
}
